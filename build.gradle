
plugins {
    id 'java'
    id 'groovy'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

defaultTasks 'build', 'shadowJar', 'publishToMavenLocal'

repositories {
    mavenLocal()
    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

dependencies {
    compile ('org.hibernate:hibernate-core:5.4.2.Final') {
        transitive = false
    }
    //explicit the Hibernate dependencies we need:
    compile 'antlr:antlr:2.7.7'
    compile 'javax.persistence:javax.persistence-api:2.2'
    compile 'javax.transaction:javax.transaction-api:1.3'
    compile 'net.bytebuddy:byte-buddy:1.9.10'
    compile 'org.jboss.logging:jboss-logging:3.3.2.Final'

    compile 'org.codehaus.groovy:groovy:2.5.6:indy'

    compile 'org.eclipse.jdt.core.compiler:ecj:4.6.1'
    compile files(org.gradle.internal.jvm.Jvm.current().toolsJar)

    testCompile 'junit:junit:4.12'
}

group = 'org.hibernate'
version = '1.0-SNAPSHOT'
description = 'query-validator'
sourceCompatibility = '1.8'

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/java']
        }
    }
}

shadowJar {
    dependencies {
        exclude(dependency('org.eclipse.jdt.core.compiler:ecj'))
        exclude "tools.jar"
    }
    relocate ('org.hibernate', 'org.hibernate.query.validator.hibernate') {
        exclude 'org.hibernate.query.validator.*'
    }
    relocate 'org.jboss', 'org.hibernate.query.validator'
    relocate 'net', 'org.hibernate.query.validator'
    relocate 'antlr', 'org.hibernate.query.validator.antlr'
    relocate 'org.apache.groovy', 'org.hibernate.query.validator.groovy'
    relocate 'groovyjarjarantlr', 'org.hibernate.query.validator.groovy.antlr'
    relocate 'groovyjarjarasm', 'org.hibernate.query.validator.asm'
    relocate 'groovyjarjarcommonscli', 'org.hibernate.query.validator.cli'
    relocate 'groovyjarjarpicocli', 'org.hibernate.query.validator.picocli'
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
